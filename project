import sqlite3
import pandas as pd
import random
import string
from datetime import datetime

# Connect to SQLite database
conn = sqlite3.connect("bank.db")
cursor = conn.cursor()

# Create tables if not exist
cursor.execute('''CREATE TABLE IF NOT EXISTS accounts (
                    id TEXT PRIMARY KEY, 
                    name TEXT, 
                    age INTEGER, 
                    balance REAL, 
                    transfer_limit REAL)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS transactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    sender TEXT, 
                    recipient TEXT, 
                    amount REAL, 
                    timestamp TEXT)''')

conn.commit()

# Ensure MAIN account exists
cursor.execute("SELECT * FROM accounts WHERE id='MAIN'")
if not cursor.fetchone():
    cursor.execute("INSERT INTO accounts (id, name, age, balance, transfer_limit) VALUES ('MAIN', 'Main Account', 0, 10000, 5000)")
    conn.commit()

# Function to set transaction limits
def set_transfer_limit():
    limit = float(input("Enter new transfer limit: "))
    cursor.execute("UPDATE accounts SET transfer_limit=? WHERE id='MAIN'", (limit,))
    conn.commit()
    print(f"Transaction limit updated: ${limit}")

# Function to process transfers
def transfer_funds():
    recipient_id = input("Enter recipient ID: ")
    amount = float(input("Enter amount to transfer: "))

    cursor.execute("SELECT balance, transfer_limit FROM accounts WHERE id='MAIN'")
    main_balance, transfer_limit = cursor.fetchone()

    cursor.execute("SELECT balance FROM accounts WHERE id=?", (recipient_id,))
    recipient = cursor.fetchone()

    if not recipient:
        print("Error: Recipient ID not found.")
        return

    if amount > main_balance:
        print("Error: Insufficient balance.")
        return

    if amount > transfer_limit:
        print(f"Error: Transfer amount exceeds the limit of ${transfer_limit}.")
        return

    # Process transfer
    cursor.execute("UPDATE accounts SET balance = balance - ? WHERE id='MAIN'", (amount,))
    cursor.execute("UPDATE accounts SET balance = balance + ? WHERE id=?", (amount, recipient_id))

    # Log transaction
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO transactions (sender, recipient, amount, timestamp) VALUES (?, ?, ?, ?)",
                   ("MAIN", recipient_id, amount, timestamp))

    conn.commit()
    print(f"Transfer Successful! Amount: ${amount} | Recipient ID: {recipient_id} | Time: {timestamp}")

# Running the functions
while True:
    print("\n1. Transfer Funds\n2. Set Transfer Limit\n3. Exit")
    choice = input("Choose an option: ")
    
    if choice == "1":
        transfer_funds()
    elif choice == "2":
        set_transfer_limit()
    elif choice == "3":
        print("Exiting...")
        break
    else:
        print("Invalid choice, try again.")
